{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","updatedPerson","put","then","response","data","delete","Filter","props","value","filterName","onChange","handleFilterChange","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Numbers","numbersToShow","map","person","i","key","name","number","onClick","deleteNumber","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","showAll","setShowAll","setFilterName","setMessage","useEffect","personService","console","log","filter","toLowerCase","includes","event","target","preventDefault","find","n","window","confirm","changedNumber","returnedName","catch","error","setTimeout","personObject","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e64d936c.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, updatedPerson) => {\n  const req = axios.put(`${baseUrl}/${id}`, updatedPerson)\n  return req.then(response=>response.data)\n}\n\nconst deletePerson = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  deletePerson: deletePerson\n}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [showAll, setShowAll] = useState(true);\n  const [filterName, setFilterName] = useState('')\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n        console.log(response.data)\n      })\n  }, [])\n\n  const deleteNumber = (name, id) => {\n    const person = persons.find(n => n.id === id);\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .deletePerson(id)\n        .then(response => {\n          setPersons(persons.filter(n => n.id !== id));\n        })\n        .catch(error => {\n          setMessage(\n            `Information of ${newName} has already been removed from the server.`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        }) }\n  };\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const person = persons.find(n => n.name === newName)\n\n    if (persons.map(person => person.name).includes(newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace\n                                        the old number with a new one?`)) {\n\n        const changedNumber = {...person, number: newNumber}\n        personService\n          .update(person.id, changedNumber)\n          .then(returnedName => {\n            setPersons(persons.map(name => name.id !== person.id ? name : returnedName))\n          })\n          .catch(error => {\n            setMessage(\n              `Updating ${newName}'s number failed.`\n            )\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })        \n      }\n\n      setMessage(\n        `Changed ${newName}'s number to ${newNumber}`\n      )\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n\n      personService\n      .create(personObject)\n      .then(response => {\n        setPersons(persons.concat(response.data))\n        setNewName('')\n      })\n      .catch(error => {\n        setMessage(\n          `Adding ${newName} failed.`\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })  \n\n      setPersons(persons.concat(personObject))\n\n      setMessage(\n        `Added ${newName}`\n      )\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setShowAll(false)\n    setFilterName(event.target.value)\n  }\n\n  const numbersToShow = showAll\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(filterName))\n\n  return (\n    <div>\n      <Notification message={message} />\n\n      <h2>Phonebook</h2>\n      <Filter filterName={filterName} handleFilterChange={handleFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        setNewName={setNewName}\n        setNewNumber={setNewNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers numbersToShow={numbersToShow} deleteNumber={deleteNumber} />\n    </div>\n  )\n\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with\n      <input\n        value={props.filterName}\n        onChange={props.handleFilterChange}\n      />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name:\n          <input\n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number:\n          <input\n          value={props.newNumber}\n          onChange={props.handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Numbers = (props) => {\n  return (\n    props.numbersToShow.map((person, i) =>\n      <ul key={person.name}>\n        <ul> {person.name} {person.number}\n          <button onClick={() => props.deleteNumber(person.name, person.id)}>\n            delete\n        </button>\n        </ul>\n      </ul>\n    )\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}